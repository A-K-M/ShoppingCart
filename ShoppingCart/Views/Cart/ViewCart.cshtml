@using ShoppingCart.Models

@{ var cart = (List<CartDetail>)ViewData["cart"];
    var SessionId = ViewData["SessionId"];
    var Product = (List<Product>)ViewData["Product"];
}
@{
    ViewBag.Title = "ViewCart";
}
<h2>
    View Cart &nbsp; &nbsp;
    @Html.ActionLink("Continue Shopping", "Gallery", "Product", new { sessionId = @SessionId }, null) &nbsp;|
    @Html.ActionLink("Checkout", "Action Method2", "Purchases") &nbsp;  &nbsp; &nbsp; &nbsp;
    <p>Total: <span id="total"></span></p>
</h2>



@using (Html.BeginForm("Index", "Purchases", FormMethod.Post))
{
    
<table class="table" id="cart_table">
    @foreach (var cartitem in cart)
    {
    <tr>
        <td>
                <div class="col-xs-6">
                    <table border="1" width="80%" align="right">
                        <tr align="center"><td><img class="border" width="200" height="200" src=@cartitem.Product.ImagePath /></td></tr>
                        <tr align="center"><td><b> @cartitem.Product.ProductName </b></td></tr>
                        <tr align="center"><td>@cartitem.Product.ProductDescription</td></tr>
                        <tr><td>
                    </table>
                </div>
            
        </td>
       <td>
            <br /><br /><br /><br /><br />
            <p> Price: $@cartitem.Product.UnitPrice</p>
            Quantity: <input type="number" value=@cartitem.Quantity id="@cartitem.Product.ProductId" min="0"
                             onchange="updatePrice(this, @cartitem.Product.UnitPrice)"
                             oninput="if (this.value == 0) remove_row(this);">
        </td>
    </tr>
    }
</table>

        }
        <script>
            var data = [];
            var total = 0;

            window.onload = function () {
                @{
                    foreach (var item in cart)
                    {
                        <text>
                        data.push
                            ({
                                    productId: '@item.Product.ProductId',
                                    quantity: '@item.Quantity',
                                    price: '@item.Product.UnitPrice'
                            })
                        </text>
                    }
                }


                setTotalValue();
            }

            function setTotalValue() {
                total = 0;
                data.forEach(item => total += (item.quantity * item.price));
                document.getElementById('total').innerText = total;
            }

            function updatePrice(sender, price) {
                let updatedCartItem = data.find(cartItem => cartItem.productId === sender.id);
                var index = data.indexOf(updatedCartItem);
                data.splice(index, 1);

                updatedCartItem.quantity = sender.value;
                data.push(updatedCartItem);

                if (sender.value === 0) {
                    deleteRow(sender);
                }

                setTotalValue();
            }
        function remove_row(r) {
            var i = r.parentNode.parentNode.rowIndex;
            document.getElementById("cart_table").deleteRow(i);

    }



        </script>
