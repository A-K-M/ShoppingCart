@using ShoppingCart.Models

@{ var cart_list = (List<CartDetail>)ViewData["cart"];
    var SessionId = ViewData["SessionId"];
    var Product = (List<Product>)ViewData["Product"];
    //decimal TotalCost = 0;
    //foreach (var cartitem in cart_list)
    //{
    //    decimal price = cartitem.Quantity * cartitem.Product.UnitPrice;
    //    TotalCost = TotalCost + price;
    //}
}
@{
    ViewBag.Title = "ViewCart";
}
<h2>
    View Cart &nbsp; &nbsp;
    @Html.ActionLink("Continue Shopping", "Gallery", "Product", new { sessionId = @SessionId }, null) &nbsp;|
    @Html.ActionLink("Checkout", "Action Method2", "Purchases") &nbsp;  &nbsp; &nbsp; &nbsp;
    <p>Total: <span id="total"></span></p>
    @*<p>Total: @TotalCost</p>*@
</h2>


<style>
    * {
        box-sizing: border-box;
    }
    /* Create two equal columns that floats next to each other */
    .column {
        float: left;
        width: 50%;
        padding: 15px;
        height: 300px; /* Should be removed. Only for demonstration */
    }

    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }

    table {
        border-spacing: 50px; /*use to work like cellspacing */
        width: 300px;
        height: 300px;
    }

    th, td {
        padding: 0px;
    }
    /*use to work like cellpadding */
</style>

@using (Html.BeginForm("Index", "Purchases", FormMethod.Post))
{
    <table class="table" id="cart_table">
        @foreach (var cartitem in cart_list)
        {
            <tr>
                <td>
                    <center>
                        <p><img class="border" width="200" height="200" src=@cartitem.Product.ImagePath /></p>
                        <p><b> @cartitem.Product.ProductName </b></p>
                        <p>@cartitem.Product.ProductDescription </p>
                    </center>
                </td>
                <td>
                    <p> Price: $@cartitem.Product.UnitPrice</p>
                    Quantity: <input inputmode="numeric" type="number" value=@cartitem.Quantity id="@cartitem.Product.ProductId" min="0"
                                     onchange="updatePrice(this, @cartitem.Product.UnitPrice)"
                                     oninput="if (this.value === 0) remove_row(this);">
                </td>
            </tr>
        }
    </table>

}
<script>
            var data = [];
            var total = 0;

            window.onload = function () {
                @{
                    foreach (var item in cart_list)
                    {
                        <text>
                        data.push
                            ({
                                    productId: '@item.Product.ProductId',
                                    quantity: '@item.Quantity',
                                    price: '@item.Product.UnitPrice'
                            })
                        </text>
                    }
                }


                setTotalValue();
            }

            function setTotalValue() {
                total = 0;
                data.forEach(item => total += (item.quantity * item.price));
                document.getElementById('total').innerText = total;
            }

            function updatePrice(sender, price) {
                let updatedCartItem = data.find(cartItem => cartItem.productId === sender.id);
                var index = data.indexOf(updatedCartItem);
                data.splice(index, 1);

                updatedCartItem.quantity = sender.value;
                data.push(updatedCartItem);

                if (sender.value === 0) {
                    deleteRow(sender);
                }

                setTotalValue();
            }
        function remove_row(r) {
            var i = r.parentNode.parentNode.rowIndex;
            document.getElementById("cart_table").deleteRow(i);

    }

    function update_cart() {

    }



</script>
